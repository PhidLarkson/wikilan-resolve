"""
Django settings for wikilan project.

Generated by 'django-admin startproject' using Django 4.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-j3u1*a3h7$yg7ix)j4*56d%8^q7ev=*wth#awoao6n4lk!72cf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base.apps.BaseConfig', 
    'chat.apps.ChatConfig',
    
]
# third party apps
# INSTALLED_APPS += [
#     'rest_framework',       # Django REST framework: A powerful and flexible toolkit for building Web APIs.
#     'rest_framework.authtoken', # Token-based authentication for Django REST framework
#     'django_filters', # Django-filter: A generic system for filtering Django QuerySets based on user selections
#     'corsheaders',  # Django-cors-headers: A Django App that adds CORS (Cross-Origin Resource Sharing) headers to responses
#     'drf_yasg',     # drf-yasg: Yet another Swagger generator: Generate real Swagger/OpenAPI 2.0 specifications from a Django Rest Framework API
#     'rest_framework_simplejwt.token_blacklist',     # Django REST framework Simple JWT: A JSON Web Token authentication plugin for Django REST framework
# ]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'wikilan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates/base'),
            os.path.join(BASE_DIR, 'templates/base/access'),
            os.path.join(BASE_DIR, 'templates/base/resources'),
            os.path.join(BASE_DIR, 'templates/base/resources/books'),
            os.path.join(BASE_DIR, 'templates/wiki'),
            os.path.join(BASE_DIR, 'templates/chat'),
            os.path.join(BASE_DIR, 'templates/chat/threads'),
            os.path.join(BASE_DIR, 'templates/chat/sessions'),
            os.path.join(BASE_DIR, 'templates/auth'),        

                 ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application functions as an interface between web servers and web applications for serving web requests.
# WSGI_APPLICATION = 'wikilan.wsgi.application'   # WSGI: Web Server Gateway Interface

# ASGI application functions as an interface between web servers and web applications for serving web requests.
# Daphne
ASGI_APPLICATION = 'wikilan.asgi.application'   # ASGI: Asynchronous Server Gateway Interface

# Channels: Django Channels is a project that takes Django and extends its abilities beyond HTTP - to handle WebSockets, chat protocols, IoT protocols, and more.
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'staticfiles/'

STATICFILES_DIRS = [
    BASE_DIR / 'staticfiles',
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Replace 'uploads' with your desired path

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# # Define the directory where static files will be collected during production
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')